@page "/ProductDetail/{id:guid}"
@using Blazored.LocalStorage
@using Client.IServices
@using Ecommerce.Application.DataTransferObj.Carts
@using Ecommerce.Application.DataTransferObj.Products
@layout CustomerLayout
@inject ICustomerServices ICus


@if(productDetail != null)
{
    <MudContainer Class="container">
        <MudCard Class="p-4">
            <MudCardContent>
                <MudText Class="h4 mt-0 mb-2" Subheader="true">
                    @productDetail.NameProduct
                </MudText>

                <div class="d-flex justify-content-between mb-2">
                    <MudText Class="text-muted">
                        Price: @productDetail.Price.ToString("C")
                    </MudText>
                    <MudChip Variant="Variant.Filled" Color="Color.Success">
                        In Stock
                    </MudChip>
                </div>

                <MudText Class="mb-4">
                    @productDetail.DescriptionProduct
                </MudText>
                <MudNumericField @bind-Value="request.NumberOfProduct" For="@(() => productDetail.Quantity)" Class="w-25" Label="Quantity" Variant="Variant.Text" Min="0" Max="10" />
                <div class="d-flex justify-content-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>OnAddToCart()">
                        Add to Cart
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary">
                        Buy Now
                    </MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    </MudContainer>
}

@code {
    [Parameter]
    public Guid id { get; set; }

    private CreateCartDetailRequest request = new();

    [Inject] NavigationManager _navigationManager { get; set; }

    [Inject] ILocalStorageService _local { get; set; }

    private ProductDTO productDetail = new ProductDTO();

    public int IntValue { get; set; }

    private string userId;

    protected override async Task OnInitializedAsync()
    {
        userId = await _local.GetItemAsync<string>("userId");
        productDetail = await ICus.GetProductByID(id);
    }

    private async void OnAddToCart()
    {
        request.UserID = Guid.Parse(userId);
        var model = await ICus.AddToCart(request);
        // tạo mới rồi tự trờ về trang
        if (model)
        {
            _navigationManager.NavigateTo("https://localhost:7167/cart");
        }
    }

    private void OnBuyNow()
    {
        // Implement logic to initiate the immediate purchase process
    }
}

