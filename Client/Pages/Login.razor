@page "/"
@inject NavigationManager _navi
@layout ZeroLayout
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Ecommerce.Application.DataTransferObj.User.Ultilities
@using Newtonsoft.Json
@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt
<MudGrid>
	<MudItem xs="12" sm="7">
		<MudPaper Class="pa-4">
			<MudForm>
				<MudTextField T="string" @bind-Value="US" Label="Username" Required="true" RequiredError="User name is required!" />
				<MudTextField T="string" @bind-Value="PW" Label="Password" HelperText="Choose a strong password"
							  InputType="InputType.Password" Required="true"
							  RequiredError="Password is required!" />
				<div class="d-flex align-center justify-space-between">
					<MudButton OnClick="HandleLogin" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Sign in</MudButton>
				</div>
			</MudForm>
		</MudPaper>
	</MudItem>
</MudGrid>
	@code {
	string US;
	string PW;
	HttpClient http = new HttpClient();
	LoginRequest request = new LoginRequest();
	private async Task HandleLogin()
	{
		request.UserName = US;
		request.Password = PW;
		var result = await http.PostAsJsonAsync("https://localhost:7140/api/Login/login", request);
		var content = await result.Content.ReadAsStringAsync();
		var handler = new JwtSecurityTokenHandler().ReadJwtToken(content);
		// Lấy thông tin từ token
		var claim = handler.Claims;
		var name = claim.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")?.Value;
		var nameidentifier = claim.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
		var role = claim.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value;
		await localStorage.SetItemAsync("userId", nameidentifier.Trim());
		await localStorage.SetItemAsync("userName", name.Trim());
		//Mẫu get
		//await localStorage.GetItemAsync<string>("userId");
		if (role.Trim().Equals("Admin"))
		{
			_navi.NavigateTo("/admindashboard");
		}
		else
		{
			_navi.NavigateTo("/customerhome");
		}
	}
}
