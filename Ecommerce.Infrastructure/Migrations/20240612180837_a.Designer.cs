// <auto-generated />
using System;
using Ecommerce.Infrastructure.Database.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Infrastructure.Migrations
{
    [DbContext(typeof(WebBanHangContext))]
    [Migration("20240612180837_a")]
    partial class a
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WardCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("city")
                        .HasColumnType("int");

                    b.Property<int>("district")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.BillDetails", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NumberOfProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("NumberOfProduct");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BillID");

                    b.HasIndex("ProductID");

                    b.ToTable("BillDetail", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("85a0fa3f-27f9-41f4-8796-2c05540c5460"),
                            BillID = new Guid("01fa417d-7900-4199-8ad9-cbb397c14235"),
                            CreatedBy = new Guid("ef578dbc-71f7-474f-a6eb-84deb7f15c15"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 43, DateTimeKind.Unspecified).AddTicks(1635), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NumberOfProduct = 3,
                            Price = 60000m,
                            ProductID = new Guid("e5512865-9aab-437e-a28d-db8db44c6ea1"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Bills", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SoldDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SoldDate");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Bill", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("01fa417d-7900-4199-8ad9-cbb397c14235"),
                            CreatedBy = new Guid("ef578dbc-71f7-474f-a6eb-84deb7f15c15"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 43, DateTimeKind.Unspecified).AddTicks(1537), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ShopId = new Guid("30d26f28-6e0a-4ecd-a5fe-0a683fdfa93a"),
                            SoldDate = new DateTime(2024, 6, 12, 18, 8, 37, 43, DateTimeKind.Utc).AddTicks(1534),
                            Status = 1,
                            TotalMoney = 60000m
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.CartDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("NumberOfProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalMoney")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartDetail", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c53c088-0e29-49c5-990a-dcd55f0c9850"),
                            CartID = new Guid("ef578dbc-71f7-474f-a6eb-84deb7f15c15"),
                            CreatedBy = new Guid("ef578dbc-71f7-474f-a6eb-84deb7f15c15"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 43, DateTimeKind.Unspecified).AddTicks(1241), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NumberOfProduct = 2m,
                            ProductID = new Guid("e5512865-9aab-437e-a28d-db8db44c6ea1"),
                            Status = 1,
                            TotalMoney = 60000m
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Carts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalMoney")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .IsUnique();

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef578dbc-71f7-474f-a6eb-84deb7f15c15"),
                            CreatedBy = new Guid("ef578dbc-71f7-474f-a6eb-84deb7f15c15"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 43, DateTimeKind.Unspecified).AddTicks(798), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 1,
                            TotalMoney = 0m
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Example", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Feedbacks", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerFeedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrderDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OrderDetailID")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.OrderDetails", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NumberOfProduct")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Shipfee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetail");

                    b.HasData(
                        new
                        {
                            ID = new Guid("4cb77348-94a0-4e0f-ad0c-e7c788798250"),
                            CreatedBy = new Guid("ef578dbc-71f7-474f-a6eb-84deb7f15c15"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 43, DateTimeKind.Unspecified).AddTicks(1339), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NumberOfProduct = 3,
                            Price = 60000m,
                            ProductID = new Guid("e5512865-9aab-437e-a28d-db8db44c6ea1"),
                            Shipfee = 0m,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.PayHistories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("MoneyPayed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PaymentExpressionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimePay")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillID");

                    b.HasIndex("PaymentExpressionID");

                    b.ToTable("PayHistory");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.PaymentExpressions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentExpressions:", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.ProductTypes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProductsTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ProductType", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("4f352b67-98ad-4557-9315-dea5a8fe1c15"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 43, DateTimeKind.Unspecified).AddTicks(965), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductsTypeName = "Bánh",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("e701de07-7b1e-4d47-88fc-fa9ddf9457d9"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 43, DateTimeKind.Unspecified).AddTicks(980), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductsTypeName = "Kẹo",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Products", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DescriptionProduct")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nchar(256)")
                        .IsFixedLength();

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameProduct")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("ProductTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductTypeID");

                    b.HasIndex("ShopId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("e5512865-9aab-437e-a28d-db8db44c6ea1"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 43, DateTimeKind.Unspecified).AddTicks(1074), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DescriptionProduct = "Ngon",
                            Images = "[\"image1.jpg\",\"image2.jpg\"]",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameProduct = "Bánh Oreon",
                            Price = 20000m,
                            ProductTypeID = new Guid("4f352b67-98ad-4557-9315-dea5a8fe1c15"),
                            Quantity = 0,
                            ShopId = new Guid("30d26f28-6e0a-4ecd-a5fe-0a683fdfa93a"),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("db904ad3-02e7-444b-8595-9305638894ec"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 43, DateTimeKind.Unspecified).AddTicks(1116), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DescriptionProduct = "Ngon",
                            Images = "[\"image3.jpg\",\"image4.jpg\"]",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameProduct = "Kẹo ChupaChup",
                            Price = 20000m,
                            ProductTypeID = new Guid("e701de07-7b1e-4d47-88fc-fa9ddf9457d9"),
                            Quantity = 0,
                            ShopId = new Guid("30d26f28-6e0a-4ecd-a5fe-0a683fdfa93a"),
                            Status = 3
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.RoleUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e2bb7a6-359d-4fed-9d63-5f24a87f8a38"),
                            CreatedBy = new Guid("e589e999-152a-44a1-bb74-48883a4d302e"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9898), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = new Guid("25d7afcb-949b-4717-a961-b50f2e18657d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("cf0be3de-b244-4e34-a8b1-1774c1dc5301"),
                            CreatedBy = new Guid("0be0ee12-f390-49c0-a775-df1933663b96"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9922), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = new Guid("25d7afcb-949b-4717-a961-b50f2e18657d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("90a33969-6b35-4ada-bf8a-041d717ebbed"),
                            CreatedBy = new Guid("73fea99f-048e-44bf-8c3c-984f705530db"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9938), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = new Guid("25d7afcb-949b-4717-a961-b50f2e18657d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("491b4ef6-d02e-478c-8b17-942645f54cb2"),
                            CreatedBy = new Guid("11b670d6-167a-42d4-be32-85cc970a218d"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9952), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = new Guid("25d7afcb-949b-4717-a961-b50f2e18657d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("af409c0f-9569-4f10-bda6-4198bd3d036f"),
                            CreatedBy = new Guid("8e0d06d1-5896-4886-a77e-6e794a212f92"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9964), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = new Guid("25d7afcb-949b-4717-a961-b50f2e18657d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("32521f19-6bed-4f20-8a6a-f3009de7a8ac"),
                            CreatedBy = new Guid("3e51f9f1-ae83-4b66-b79f-5eb8f32d2075"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9981), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = new Guid("25d7afcb-949b-4717-a961-b50f2e18657d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("db7630c3-90c9-47f5-9e54-84609b7a161e"),
                            CreatedBy = new Guid("ef578dbc-71f7-474f-a6eb-84deb7f15c15"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9994), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = new Guid("ba820c64-1a81-4c44-80ea-47038c930c3b"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("201ba8da-35fb-47cc-877a-903671570ba6"),
                            CreatedBy = new Guid("ef578dbc-71f7-474f-a6eb-84deb7f15c15"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 43, DateTimeKind.Unspecified).AddTicks(31), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = new Guid("56bece24-ba60-4b2b-801c-b68cfc8ccf9d"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Roles", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("25d7afcb-949b-4717-a961-b50f2e18657d"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(7771), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleName = "Admin",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("ba820c64-1a81-4c44-80ea-47038c930c3b"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(7869), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleName = "Client",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("56bece24-ba60-4b2b-801c-b68cfc8ccf9d"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(7880), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleName = "Shop",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.SaleDetails", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("IdProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSale")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdSale");

                    b.ToTable("SaleDetails", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.SaleTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SaleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SaleTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SaleType", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Sales", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SaleName")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<Guid>("SaleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Sale", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Shops", b =>
                {
                    b.Property<Guid>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopImages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShopId");

                    b.HasIndex("CreatedBy")
                        .IsUnique()
                        .HasFilter("[CreatedBy] IS NOT NULL");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            ShopId = new Guid("30d26f28-6e0a-4ecd-a5fe-0a683fdfa93a"),
                            CreatedBy = new Guid("ef578dbc-71f7-474f-a6eb-84deb7f15c15"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 12, 18, 8, 37, 43, DateTimeKind.Unspecified).AddTicks(144), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ShopAddress = "123 Street",
                            ShopEmail = "azusachan307@gmail.com",
                            ShopImages = "avtShop1.jpg",
                            ShopName = "Vinsmart",
                            ShopPhone = "0905989504"
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Users", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<DateTimeOffset?>("SentTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("ID");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("e589e999-152a-44a1-bb74-48883a4d302e"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(8160), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "azusachan309@gmail.com",
                            FullName = "DangsNguyen",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "LK25tQh1RqkKbrq4C2l6fw==",
                            PhoneNumber = "0123456789",
                            Status = 1,
                            Username = "Dangs"
                        },
                        new
                        {
                            ID = new Guid("0be0ee12-f390-49c0-a775-df1933663b96"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(8975), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "trongnvph35790@fpt.edu.vn",
                            FullName = "Nguyen Van Trong",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "LK25tQh1RqkKbrq4C2l6fw==",
                            PhoneNumber = "0123456789",
                            Status = 1,
                            Username = "Trongnv"
                        },
                        new
                        {
                            ID = new Guid("73fea99f-048e-44bf-8c3c-984f705530db"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9099), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "thendph35306@fpt.edu.vn",
                            FullName = "Nguyen Dinh The",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "LK25tQh1RqkKbrq4C2l6fw==",
                            PhoneNumber = "0123456789",
                            Status = 1,
                            Username = "THEDZ"
                        },
                        new
                        {
                            ID = new Guid("11b670d6-167a-42d4-be32-85cc970a218d"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9221), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "dongbdph35416@fpt.edu.vn",
                            FullName = "Bui Duy Dong",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "LK25tQh1RqkKbrq4C2l6fw==",
                            PhoneNumber = "0123456789",
                            Status = 1,
                            Username = "Dong"
                        },
                        new
                        {
                            ID = new Guid("8e0d06d1-5896-4886-a77e-6e794a212f92"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9374), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "phongdxph35748@fpt.edu.vn",
                            FullName = "Xuan Phong",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "LK25tQh1RqkKbrq4C2l6fw==",
                            PhoneNumber = "0123456789",
                            Status = 1,
                            Username = "Phong"
                        },
                        new
                        {
                            ID = new Guid("3e51f9f1-ae83-4b66-b79f-5eb8f32d2075"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9494), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "hoangpkph38105@fpt.edu.vn",
                            FullName = "Hoang",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "LK25tQh1RqkKbrq4C2l6fw==",
                            PhoneNumber = "0123456789",
                            Status = 1,
                            Username = "Hoang"
                        },
                        new
                        {
                            ID = new Guid("ef578dbc-71f7-474f-a6eb-84deb7f15c15"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 6, 13, 1, 8, 37, 42, DateTimeKind.Unspecified).AddTicks(9580), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "azusachan307@gmail.com",
                            FullName = "Client Test",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "LK25tQh1RqkKbrq4C2l6fw==",
                            PhoneNumber = "0123456789",
                            Status = 1,
                            Username = "client"
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.VoucherDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("VocherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.HasIndex("VocherID");

                    b.ToTable("VocherDetail");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.VoucherTypes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("VocherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VocherTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("ID");

                    b.ToTable("VocherType");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Vouchers", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("VocherName")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<Guid>("VocherTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("BillID");

                    b.HasIndex("VocherTypeID");

                    b.ToTable("Vocher", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Address", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Users", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.BillDetails", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Bills", "Bills")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Database.Entities.Products", "Products")
                        .WithMany("BillDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bills");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Bills", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Users", "Users")
                        .WithMany("Bills")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.CartDetails", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Carts", "Carts")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Database.Entities.Products", "Products")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Carts", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Users", "Users")
                        .WithOne("Carts")
                        .HasForeignKey("Ecommerce.Domain.Database.Entities.Carts", "CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Feedbacks", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.OrderDetails", "OrderDetails")
                        .WithOne("Feedbacks")
                        .HasForeignKey("Ecommerce.Domain.Database.Entities.Feedbacks", "OrderDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.OrderDetails", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Users", "Users")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Ecommerce.Domain.Database.Entities.Products", "Products")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.PayHistories", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Bills", "Bills")
                        .WithMany("PayHistories")
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Database.Entities.PaymentExpressions", "PaymentExpressions")
                        .WithMany("PayHistories")
                        .HasForeignKey("PaymentExpressionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bills");

                    b.Navigation("PaymentExpressions");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Products", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.ProductTypes", "ProductTypes")
                        .WithMany("Product")
                        .HasForeignKey("ProductTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Database.Entities.Shops", "Shops")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductTypes");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.RoleUser", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Users", "Users")
                        .WithMany("RoleUsers")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Ecommerce.Domain.Database.Entities.Roles", "Roles")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.SaleDetails", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Products", "Products")
                        .WithMany("SaleDetails")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Database.Entities.Sales", "Sales")
                        .WithMany("SaleDetails")
                        .HasForeignKey("IdSale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Sales", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.SaleTypes", "SaleTypes")
                        .WithMany("Sale")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleTypes");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Shops", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Users", "Users")
                        .WithOne("Shops")
                        .HasForeignKey("Ecommerce.Domain.Database.Entities.Shops", "CreatedBy");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.VoucherDetails", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Products", "Products")
                        .WithMany("VoucherDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Database.Entities.Vouchers", "Vouchers")
                        .WithMany("VoucherDetails")
                        .HasForeignKey("VocherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Vouchers", b =>
                {
                    b.HasOne("Ecommerce.Domain.Database.Entities.Bills", "Bills")
                        .WithMany("Vouchers")
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Database.Entities.VoucherTypes", "VoucherTypes")
                        .WithMany("Vocher")
                        .HasForeignKey("VocherTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bills");

                    b.Navigation("VoucherTypes");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Bills", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("PayHistories");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Carts", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.OrderDetails", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.PaymentExpressions", b =>
                {
                    b.Navigation("PayHistories");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.ProductTypes", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Products", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("CartDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("SaleDetails");

                    b.Navigation("VoucherDetails");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Roles", b =>
                {
                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.SaleTypes", b =>
                {
                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Sales", b =>
                {
                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Shops", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Users", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Bills");

                    b.Navigation("Carts")
                        .IsRequired();

                    b.Navigation("OrderDetails");

                    b.Navigation("RoleUsers");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.VoucherTypes", b =>
                {
                    b.Navigation("Vocher");
                });

            modelBuilder.Entity("Ecommerce.Domain.Database.Entities.Vouchers", b =>
                {
                    b.Navigation("VoucherDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
